// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TwitterJSON;
//
//    var tweet = Tweet.FromJson(jsonString);

namespace TweetImporter.TwitterJSON
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Tweet
    {
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("full_text")]
        public string FullText { get; set; }

        [JsonProperty("truncated")]
        public bool Truncated { get; set; }

        [JsonProperty("display_text_range")]
        public List<long> DisplayTextRange { get; set; }

        [JsonProperty("entities")]
        public TweetEntities Entities { get; set; }

        [JsonProperty("extended_entities", NullValueHandling = NullValueHandling.Ignore)]
        public TweetExtendedEntities ExtendedEntities { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("in_reply_to_status_id")]
        public double? InReplyToStatusId { get; set; }

        [JsonProperty("in_reply_to_status_id_str")]
        public string InReplyToStatusIdStr { get; set; }

        [JsonProperty("in_reply_to_user_id")]
        public double? InReplyToUserId { get; set; }

        [JsonProperty("in_reply_to_user_id_str")]
        public string InReplyToUserIdStr { get; set; }

        [JsonProperty("in_reply_to_screen_name")]
        public string InReplyToScreenName { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }

        [JsonProperty("geo")]
        public object Geo { get; set; }

        [JsonProperty("coordinates")]
        public object Coordinates { get; set; }

        [JsonProperty("place")]
        public object Place { get; set; }

        [JsonProperty("contributors")]
        public object Contributors { get; set; }

        [JsonProperty("retweeted_status", NullValueHandling = NullValueHandling.Ignore)]
        public RetweetedStatus RetweetedStatus { get; set; }

        [JsonProperty("is_quote_status")]
        public bool IsQuoteStatus { get; set; }

        [JsonProperty("retweet_count")]
        public long RetweetCount { get; set; }

        [JsonProperty("favorite_count")]
        public long FavoriteCount { get; set; }

        [JsonProperty("favorited")]
        public bool Favorited { get; set; }

        [JsonProperty("retweeted")]
        public bool Retweeted { get; set; }

        [JsonProperty("possibly_sensitive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PossiblySensitive { get; set; }

        [JsonProperty("possibly_sensitive_appealable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PossiblySensitiveAppealable { get; set; }

        [JsonProperty("lang")]
        public Lang Lang { get; set; }

        [JsonProperty("quoted_status_id", NullValueHandling = NullValueHandling.Ignore)]
        public double? QuotedStatusId { get; set; }

        [JsonProperty("quoted_status_id_str", NullValueHandling = NullValueHandling.Ignore)]
        public string QuotedStatusIdStr { get; set; }

        [JsonProperty("quoted_status_permalink", NullValueHandling = NullValueHandling.Ignore)]
        public QuotedStatusPermalink QuotedStatusPermalink { get; set; }

        [JsonProperty("quoted_status", NullValueHandling = NullValueHandling.Ignore)]
        public TweetQuotedStatus QuotedStatus { get; set; }
    }

    public partial class TweetEntities
    {
        [JsonProperty("hashtags")]
        public List<Hashtag> Hashtags { get; set; }

        [JsonProperty("symbols")]
        public List<object> Symbols { get; set; }

        [JsonProperty("user_mentions")]
        public List<UserMention> UserMentions { get; set; }

        [JsonProperty("urls")]
        public List<Url> Urls { get; set; }

        [JsonProperty("media", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleMedia> Media { get; set; }
    }

    public partial class Hashtag
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("indices")]
        public List<long> Indices { get; set; }
    }

    public partial class PurpleMedia
    {
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("indices")]
        public List<long> Indices { get; set; }

        [JsonProperty("media_url")]
        public Uri MediaUrl { get; set; }

        [JsonProperty("media_url_https")]
        public Uri MediaUrlHttps { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("display_url")]
        public string DisplayUrl { get; set; }

        [JsonProperty("expanded_url")]
        public Uri ExpandedUrl { get; set; }

        [JsonProperty("type")]
        public MediaType Type { get; set; }

        [JsonProperty("sizes")]
        public Sizes Sizes { get; set; }

        [JsonProperty("source_status_id", NullValueHandling = NullValueHandling.Ignore)]
        public double? SourceStatusId { get; set; }

        [JsonProperty("source_status_id_str", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceStatusIdStr { get; set; }

        [JsonProperty("source_user_id", NullValueHandling = NullValueHandling.Ignore)]
        public double? SourceUserId { get; set; }

        [JsonProperty("source_user_id_str", NullValueHandling = NullValueHandling.Ignore)]
        public string SourceUserIdStr { get; set; }

        [JsonProperty("features")]
        public Features Features { get; set; }

        [JsonProperty("ext_alt_text")]
        public string ExtAltText { get; set; }

        [JsonProperty("video_info", NullValueHandling = NullValueHandling.Ignore)]
        public VideoInfo VideoInfo { get; set; }

        [JsonProperty("additional_media_info", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleAdditionalMediaInfo AdditionalMediaInfo { get; set; }
    }

    public partial class PurpleAdditionalMediaInfo
    {
        [JsonProperty("monetizable")]
        public bool Monetizable { get; set; }

        [JsonProperty("source_user", NullValueHandling = NullValueHandling.Ignore)]
        public User SourceUser { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("call_to_actions", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCallToActions CallToActions { get; set; }

        [JsonProperty("embeddable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Embeddable { get; set; }
    }

    public partial class PurpleCallToActions
    {
        [JsonProperty("watch_now")]
        public WatchNow WatchNow { get; set; }
    }

    public partial class WatchNow
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class User
    {
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("screen_name")]
        public string ScreenName { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("entities")]
        public UserEntities Entities { get; set; }

        [JsonProperty("protected")]
        public bool Protected { get; set; }

        [JsonProperty("followers_count")]
        public long FollowersCount { get; set; }

        [JsonProperty("friends_count")]
        public long FriendsCount { get; set; }

        [JsonProperty("listed_count")]
        public long ListedCount { get; set; }

        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("favourites_count")]
        public long FavouritesCount { get; set; }

        [JsonProperty("utc_offset")]
        public object UtcOffset { get; set; }

        [JsonProperty("time_zone")]
        public object TimeZone { get; set; }

        [JsonProperty("geo_enabled")]
        public bool GeoEnabled { get; set; }

        [JsonProperty("verified")]
        public bool Verified { get; set; }

        [JsonProperty("statuses_count")]
        public long StatusesCount { get; set; }

        [JsonProperty("lang")]
        public object Lang { get; set; }

        [JsonProperty("contributors_enabled")]
        public bool ContributorsEnabled { get; set; }

        [JsonProperty("is_translator")]
        public bool IsTranslator { get; set; }

        [JsonProperty("is_translation_enabled")]
        public bool IsTranslationEnabled { get; set; }

        [JsonProperty("profile_background_color")]
        public ProfileBackgroundColorUnion ProfileBackgroundColor { get; set; }

        [JsonProperty("profile_background_image_url")]
        public Uri ProfileBackgroundImageUrl { get; set; }

        [JsonProperty("profile_background_image_url_https")]
        public Uri ProfileBackgroundImageUrlHttps { get; set; }

        [JsonProperty("profile_background_tile")]
        public bool ProfileBackgroundTile { get; set; }

        [JsonProperty("profile_image_url")]
        public Uri ProfileImageUrl { get; set; }

        [JsonProperty("profile_image_url_https")]
        public Uri ProfileImageUrlHttps { get; set; }

        [JsonProperty("profile_banner_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ProfileBannerUrl { get; set; }

        [JsonProperty("profile_image_extensions_alt_text")]
        public object ProfileImageExtensionsAltText { get; set; }

        [JsonProperty("profile_banner_extensions_alt_text")]
        public object ProfileBannerExtensionsAltText { get; set; }

        [JsonProperty("profile_link_color")]
        public string ProfileLinkColor { get; set; }

        [JsonProperty("profile_sidebar_border_color")]
        public ProfileSidebarBorderColor ProfileSidebarBorderColor { get; set; }

        [JsonProperty("profile_sidebar_fill_color")]
        public ProfileSidebarFillColorUnion ProfileSidebarFillColor { get; set; }

        [JsonProperty("profile_text_color")]
        public ProfileTextColorUnion ProfileTextColor { get; set; }

        [JsonProperty("profile_use_background_image")]
        public bool ProfileUseBackgroundImage { get; set; }

        [JsonProperty("has_extended_profile")]
        public bool HasExtendedProfile { get; set; }

        [JsonProperty("default_profile")]
        public bool DefaultProfile { get; set; }

        [JsonProperty("default_profile_image")]
        public bool DefaultProfileImage { get; set; }

        [JsonProperty("can_media_tag")]
        public bool CanMediaTag { get; set; }

        [JsonProperty("followed_by")]
        public bool FollowedBy { get; set; }

        [JsonProperty("following")]
        public bool Following { get; set; }

        [JsonProperty("follow_request_sent")]
        public bool FollowRequestSent { get; set; }

        [JsonProperty("notifications")]
        public bool Notifications { get; set; }

        [JsonProperty("translator_type")]
        public TranslatorType TranslatorType { get; set; }
    }

    public partial class UserEntities
    {
        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Description Url { get; set; }

        [JsonProperty("description")]
        public Description Description { get; set; }
    }

    public partial class Description
    {
        [JsonProperty("urls")]
        public List<Url> Urls { get; set; }
    }

    public partial class Url
    {
        [JsonProperty("url")]
        public Uri UrlUrl { get; set; }

        [JsonProperty("expanded_url")]
        public Uri ExpandedUrl { get; set; }

        [JsonProperty("display_url", NullValueHandling = NullValueHandling.Ignore)]
        public string DisplayUrl { get; set; }

        [JsonProperty("indices")]
        public List<long> Indices { get; set; }
    }

    public partial class Features
    {
        [JsonProperty("orig", NullValueHandling = NullValueHandling.Ignore)]
        public OrigClass Orig { get; set; }

        [JsonProperty("large", NullValueHandling = NullValueHandling.Ignore)]
        public OrigClass Large { get; set; }

        [JsonProperty("small", NullValueHandling = NullValueHandling.Ignore)]
        public OrigClass Small { get; set; }

        [JsonProperty("medium", NullValueHandling = NullValueHandling.Ignore)]
        public OrigClass Medium { get; set; }

        [JsonProperty("all", NullValueHandling = NullValueHandling.Ignore)]
        public All All { get; set; }
    }

    public partial class All
    {
        [JsonProperty("tags")]
        public List<Tag> Tags { get; set; }
    }

    public partial class Tag
    {
        [JsonProperty("type")]
        public TagType Type { get; set; }

        [JsonProperty("user_id")]
        public string UserId { get; set; }

        [JsonProperty("screen_name")]
        public ScreenName ScreenName { get; set; }

        [JsonProperty("name")]
        public Name Name { get; set; }
    }

    public partial class OrigClass
    {
        [JsonProperty("faces")]
        public List<Face> Faces { get; set; }
    }

    public partial class Face
    {
        [JsonProperty("x")]
        public long X { get; set; }

        [JsonProperty("y")]
        public long Y { get; set; }

        [JsonProperty("h")]
        public long H { get; set; }

        [JsonProperty("w")]
        public long W { get; set; }
    }

    public partial class Sizes
    {
        [JsonProperty("thumb")]
        public ThumbClass Thumb { get; set; }

        [JsonProperty("large")]
        public ThumbClass Large { get; set; }

        [JsonProperty("small")]
        public ThumbClass Small { get; set; }

        [JsonProperty("medium")]
        public ThumbClass Medium { get; set; }
    }

    public partial class ThumbClass
    {
        [JsonProperty("w")]
        public long W { get; set; }

        [JsonProperty("h")]
        public long H { get; set; }

        [JsonProperty("resize")]
        public Resize Resize { get; set; }
    }

    public partial class VideoInfo
    {
        [JsonProperty("aspect_ratio")]
        public List<long> AspectRatio { get; set; }

        [JsonProperty("duration_millis", NullValueHandling = NullValueHandling.Ignore)]
        public long? DurationMillis { get; set; }

        [JsonProperty("variants")]
        public List<Variant> Variants { get; set; }
    }

    public partial class Variant
    {
        [JsonProperty("bitrate", NullValueHandling = NullValueHandling.Ignore)]
        public long? Bitrate { get; set; }

        [JsonProperty("content_type")]
        public ContentType ContentType { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class UserMention
    {
        [JsonProperty("screen_name")]
        public string ScreenName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("indices")]
        public List<long> Indices { get; set; }
    }

    public partial class TweetExtendedEntities
    {
        [JsonProperty("media")]
        public List<PurpleMedia> Media { get; set; }
    }

    public partial class TweetQuotedStatus
    {
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("full_text")]
        public string FullText { get; set; }

        [JsonProperty("truncated")]
        public bool Truncated { get; set; }

        [JsonProperty("display_text_range")]
        public List<long> DisplayTextRange { get; set; }

        [JsonProperty("entities")]
        public QuotedStatusEntities Entities { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("in_reply_to_status_id")]
        public double? InReplyToStatusId { get; set; }

        [JsonProperty("in_reply_to_status_id_str")]
        public string InReplyToStatusIdStr { get; set; }

        [JsonProperty("in_reply_to_user_id")]
        public double? InReplyToUserId { get; set; }

        [JsonProperty("in_reply_to_user_id_str")]
        public string InReplyToUserIdStr { get; set; }

        [JsonProperty("in_reply_to_screen_name")]
        public string InReplyToScreenName { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }

        [JsonProperty("geo")]
        public object Geo { get; set; }

        [JsonProperty("coordinates")]
        public object Coordinates { get; set; }

        [JsonProperty("place")]
        public object Place { get; set; }

        [JsonProperty("contributors")]
        public object Contributors { get; set; }

        [JsonProperty("is_quote_status")]
        public bool IsQuoteStatus { get; set; }

        [JsonProperty("quoted_status_id", NullValueHandling = NullValueHandling.Ignore)]
        public double? QuotedStatusId { get; set; }

        [JsonProperty("quoted_status_id_str", NullValueHandling = NullValueHandling.Ignore)]
        public string QuotedStatusIdStr { get; set; }

        [JsonProperty("quoted_status_permalink", NullValueHandling = NullValueHandling.Ignore)]
        public QuotedStatusPermalink QuotedStatusPermalink { get; set; }

        [JsonProperty("retweet_count")]
        public long RetweetCount { get; set; }

        [JsonProperty("favorite_count")]
        public long FavoriteCount { get; set; }

        [JsonProperty("favorited")]
        public bool Favorited { get; set; }

        [JsonProperty("retweeted")]
        public bool Retweeted { get; set; }

        [JsonProperty("possibly_sensitive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PossiblySensitive { get; set; }

        [JsonProperty("possibly_sensitive_appealable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PossiblySensitiveAppealable { get; set; }

        [JsonProperty("lang")]
        public Lang Lang { get; set; }

        [JsonProperty("extended_entities", NullValueHandling = NullValueHandling.Ignore)]
        public QuotedStatusExtendedEntities ExtendedEntities { get; set; }
    }

    public partial class QuotedStatusEntities
    {
        [JsonProperty("hashtags")]
        public List<Hashtag> Hashtags { get; set; }

        [JsonProperty("symbols")]
        public List<object> Symbols { get; set; }

        [JsonProperty("user_mentions")]
        public List<UserMention> UserMentions { get; set; }

        [JsonProperty("urls")]
        public List<Url> Urls { get; set; }

        [JsonProperty("media", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyMedia> Media { get; set; }
    }

    public partial class FluffyMedia
    {
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("indices")]
        public List<long> Indices { get; set; }

        [JsonProperty("media_url")]
        public Uri MediaUrl { get; set; }

        [JsonProperty("media_url_https")]
        public Uri MediaUrlHttps { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("display_url")]
        public string DisplayUrl { get; set; }

        [JsonProperty("expanded_url")]
        public Uri ExpandedUrl { get; set; }

        [JsonProperty("type")]
        public MediaType Type { get; set; }

        [JsonProperty("sizes")]
        public Sizes Sizes { get; set; }

        [JsonProperty("features")]
        public Features Features { get; set; }

        [JsonProperty("ext_alt_text")]
        public object ExtAltText { get; set; }
    }

    public partial class QuotedStatusExtendedEntities
    {
        [JsonProperty("media")]
        public List<FluffyMedia> Media { get; set; }
    }

    public partial class QuotedStatusPermalink
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("expanded")]
        public Uri Expanded { get; set; }

        [JsonProperty("display")]
        public string Display { get; set; }
    }

    public partial class RetweetedStatus
    {
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("full_text")]
        public string FullText { get; set; }

        [JsonProperty("truncated")]
        public bool Truncated { get; set; }

        [JsonProperty("display_text_range")]
        public List<long> DisplayTextRange { get; set; }

        [JsonProperty("entities")]
        public RetweetedStatusEntities Entities { get; set; }

        [JsonProperty("extended_entities", NullValueHandling = NullValueHandling.Ignore)]
        public RetweetedStatusExtendedEntities ExtendedEntities { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("in_reply_to_status_id")]
        public double? InReplyToStatusId { get; set; }

        [JsonProperty("in_reply_to_status_id_str")]
        public string InReplyToStatusIdStr { get; set; }

        [JsonProperty("in_reply_to_user_id")]
        public double? InReplyToUserId { get; set; }

        [JsonProperty("in_reply_to_user_id_str")]
        public string InReplyToUserIdStr { get; set; }

        [JsonProperty("in_reply_to_screen_name")]
        public string InReplyToScreenName { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }

        [JsonProperty("geo")]
        public object Geo { get; set; }

        [JsonProperty("coordinates")]
        public object Coordinates { get; set; }

        [JsonProperty("place")]
        public Place Place { get; set; }

        [JsonProperty("contributors")]
        public object Contributors { get; set; }

        [JsonProperty("is_quote_status")]
        public bool IsQuoteStatus { get; set; }

        [JsonProperty("retweet_count")]
        public long RetweetCount { get; set; }

        [JsonProperty("favorite_count")]
        public long FavoriteCount { get; set; }

        [JsonProperty("favorited")]
        public bool Favorited { get; set; }

        [JsonProperty("retweeted")]
        public bool Retweeted { get; set; }

        [JsonProperty("possibly_sensitive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PossiblySensitive { get; set; }

        [JsonProperty("possibly_sensitive_appealable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PossiblySensitiveAppealable { get; set; }

        [JsonProperty("lang")]
        public Lang Lang { get; set; }

        [JsonProperty("quoted_status_id", NullValueHandling = NullValueHandling.Ignore)]
        public double? QuotedStatusId { get; set; }

        [JsonProperty("quoted_status_id_str", NullValueHandling = NullValueHandling.Ignore)]
        public string QuotedStatusIdStr { get; set; }

        [JsonProperty("quoted_status_permalink", NullValueHandling = NullValueHandling.Ignore)]
        public QuotedStatusPermalink QuotedStatusPermalink { get; set; }

        [JsonProperty("quoted_status", NullValueHandling = NullValueHandling.Ignore)]
        public RetweetedStatusQuotedStatus QuotedStatus { get; set; }
    }

    public partial class RetweetedStatusEntities
    {
        [JsonProperty("hashtags")]
        public List<Hashtag> Hashtags { get; set; }

        [JsonProperty("symbols")]
        public List<object> Symbols { get; set; }

        [JsonProperty("user_mentions")]
        public List<UserMention> UserMentions { get; set; }

        [JsonProperty("urls")]
        public List<Url> Urls { get; set; }

        [JsonProperty("media", NullValueHandling = NullValueHandling.Ignore)]
        public List<TentacledMedia> Media { get; set; }
    }

    public partial class TentacledMedia
    {
        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("indices")]
        public List<long> Indices { get; set; }

        [JsonProperty("media_url")]
        public Uri MediaUrl { get; set; }

        [JsonProperty("media_url_https")]
        public Uri MediaUrlHttps { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("display_url")]
        public string DisplayUrl { get; set; }

        [JsonProperty("expanded_url")]
        public Uri ExpandedUrl { get; set; }

        [JsonProperty("type")]
        public MediaType Type { get; set; }

        [JsonProperty("sizes")]
        public Sizes Sizes { get; set; }

        [JsonProperty("features")]
        public Features Features { get; set; }

        [JsonProperty("ext_alt_text")]
        public object ExtAltText { get; set; }

        [JsonProperty("video_info", NullValueHandling = NullValueHandling.Ignore)]
        public VideoInfo VideoInfo { get; set; }

        [JsonProperty("additional_media_info", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyAdditionalMediaInfo AdditionalMediaInfo { get; set; }
    }

    public partial class FluffyAdditionalMediaInfo
    {
        [JsonProperty("monetizable")]
        public bool Monetizable { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("embeddable", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Embeddable { get; set; }

        [JsonProperty("call_to_actions", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyCallToActions CallToActions { get; set; }
    }

    public partial class FluffyCallToActions
    {
        [JsonProperty("watch_now", NullValueHandling = NullValueHandling.Ignore)]
        public WatchNow WatchNow { get; set; }

        [JsonProperty("visit_site", NullValueHandling = NullValueHandling.Ignore)]
        public WatchNow VisitSite { get; set; }
    }

    public partial class RetweetedStatusExtendedEntities
    {
        [JsonProperty("media")]
        public List<TentacledMedia> Media { get; set; }
    }

    public partial class Place
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("place_type")]
        public string PlaceType { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("full_name")]
        public string FullName { get; set; }

        [JsonProperty("country_code")]
        public string CountryCode { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("contained_within")]
        public List<object> ContainedWithin { get; set; }

        [JsonProperty("bounding_box")]
        public BoundingBox BoundingBox { get; set; }

        [JsonProperty("attributes")]
        public Attributes Attributes { get; set; }
    }

    public partial class Attributes
    {
    }

    public partial class BoundingBox
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("coordinates")]
        public List<List<List<double>>> Coordinates { get; set; }
    }

    public partial class RetweetedStatusQuotedStatus
    {
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }

        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("full_text")]
        public string FullText { get; set; }

        [JsonProperty("truncated")]
        public bool Truncated { get; set; }

        [JsonProperty("display_text_range")]
        public List<long> DisplayTextRange { get; set; }

        [JsonProperty("entities")]
        public QuotedStatusEntities Entities { get; set; }

        [JsonProperty("extended_entities")]
        public QuotedStatusExtendedEntities ExtendedEntities { get; set; }

        [JsonProperty("source")]
        public string Source { get; set; }

        [JsonProperty("in_reply_to_status_id")]
        public object InReplyToStatusId { get; set; }

        [JsonProperty("in_reply_to_status_id_str")]
        public object InReplyToStatusIdStr { get; set; }

        [JsonProperty("in_reply_to_user_id")]
        public object InReplyToUserId { get; set; }

        [JsonProperty("in_reply_to_user_id_str")]
        public object InReplyToUserIdStr { get; set; }

        [JsonProperty("in_reply_to_screen_name")]
        public object InReplyToScreenName { get; set; }

        [JsonProperty("user")]
        public User User { get; set; }

        [JsonProperty("geo")]
        public object Geo { get; set; }

        [JsonProperty("coordinates")]
        public object Coordinates { get; set; }

        [JsonProperty("place")]
        public Place Place { get; set; }

        [JsonProperty("contributors")]
        public object Contributors { get; set; }

        [JsonProperty("is_quote_status")]
        public bool IsQuoteStatus { get; set; }

        [JsonProperty("quoted_status_id", NullValueHandling = NullValueHandling.Ignore)]
        public double? QuotedStatusId { get; set; }

        [JsonProperty("quoted_status_id_str", NullValueHandling = NullValueHandling.Ignore)]
        public string QuotedStatusIdStr { get; set; }

        [JsonProperty("quoted_status_permalink", NullValueHandling = NullValueHandling.Ignore)]
        public QuotedStatusPermalink QuotedStatusPermalink { get; set; }

        [JsonProperty("retweet_count")]
        public long RetweetCount { get; set; }

        [JsonProperty("favorite_count")]
        public long FavoriteCount { get; set; }

        [JsonProperty("favorited")]
        public bool Favorited { get; set; }

        [JsonProperty("retweeted")]
        public bool Retweeted { get; set; }

        [JsonProperty("possibly_sensitive")]
        public bool PossiblySensitive { get; set; }

        [JsonProperty("possibly_sensitive_appealable")]
        public bool PossiblySensitiveAppealable { get; set; }

        [JsonProperty("lang")]
        public Lang Lang { get; set; }
    }

    public enum ProfileBackgroundColorEnum { Abb8C2, Ba4A4C, C0Deed, C15B69, C6E2Ee, Cef7Bd, Dae6D8, Dbe9Ed, Dd2E44, Dfe3E8, Dfe6Eb, Eee9E9, F5Abb5, F5F8Fa, Fab81E, Ff6699, Ff691F, Ffcc4D, Fff04D, Ffffff, The000000, The002402, The008Acf, The0099B9, The0C1313, The13264B, The1A1B1F, The1C1C1C, The2375D9, The412F4D, The642D8B, The8B9Ecf, The981Ceb };

    public enum ProfileSidebarBorderColor { C0Deed, C6E2Ee, Cc3366, D3D2Cf, Dbe9Ed, Eeeeee, Ffffff, The000000, The008Cff, The181A1E, The28442E, The5Ed4Dc, The7A5151 };

    public enum ProfileSidebarFillColorEnum { A0C5C7, Acf2F2, Cbc6A8, D5B777, Daecf4, Ddeef6, E3E2De, E5507E, E6F6F9, Efefef, F6F6F6, Ff9100, Ffffff, The000000, The4A6544, The95E8Ec, The99Cc33 };

    public enum ProfileTextColorEnum { A27550, Fce9C2, The000000, The2626E3, The3C3940, The3E4415, The663B12, The9Dbc80, The9Fa990 };

    public enum TranslatorType { None, Regular };

    public enum Name { Borvar, Lexi, Pelo, PleasureCastle, RaynoGroundwalker };

    public enum ScreenName { Borvart, DeaderSquid, FakeryWay, RaynoTw, SrPelo };

    public enum TagType { User };

    public enum Resize { Crop, Fit };

    public enum MediaType { AnimatedGif, Photo, Video };

    public enum ContentType { ApplicationXMpegUrl, VideoMp4 };

    public enum Lang { Da, De, En, Es, Et, Fr, In, Ja, Ko, No, Pt, Tl, Tr, Und };

    public partial struct ProfileBackgroundColorUnion
    {
        public ProfileBackgroundColorEnum? Enum;
        public long? Integer;

        public static implicit operator ProfileBackgroundColorUnion(ProfileBackgroundColorEnum Enum) => new ProfileBackgroundColorUnion { Enum = Enum };
        public static implicit operator ProfileBackgroundColorUnion(long Integer) => new ProfileBackgroundColorUnion { Integer = Integer };
    }

    public partial struct ProfileSidebarFillColorUnion
    {
        public ProfileSidebarFillColorEnum? Enum;
        public long? Integer;

        public static implicit operator ProfileSidebarFillColorUnion(ProfileSidebarFillColorEnum Enum) => new ProfileSidebarFillColorUnion { Enum = Enum };
        public static implicit operator ProfileSidebarFillColorUnion(long Integer) => new ProfileSidebarFillColorUnion { Integer = Integer };
    }

    public partial struct ProfileTextColorUnion
    {
        public ProfileTextColorEnum? Enum;
        public long? Integer;

        public static implicit operator ProfileTextColorUnion(ProfileTextColorEnum Enum) => new ProfileTextColorUnion { Enum = Enum };
        public static implicit operator ProfileTextColorUnion(long Integer) => new ProfileTextColorUnion { Integer = Integer };
    }

    public partial class Tweet
    {
        public static List<Tweet> FromJson(string json) => JsonConvert.DeserializeObject<List<Tweet>>(json, TwitterJSON.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Tweet> self) => JsonConvert.SerializeObject(self, TwitterJSON.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ProfileBackgroundColorUnionConverter.Singleton,
                ProfileBackgroundColorEnumConverter.Singleton,
                ProfileSidebarBorderColorConverter.Singleton,
                ProfileSidebarFillColorUnionConverter.Singleton,
                ProfileSidebarFillColorEnumConverter.Singleton,
                ProfileTextColorUnionConverter.Singleton,
                ProfileTextColorEnumConverter.Singleton,
                TranslatorTypeConverter.Singleton,
                NameConverter.Singleton,
                ScreenNameConverter.Singleton,
                TagTypeConverter.Singleton,
                ResizeConverter.Singleton,
                MediaTypeConverter.Singleton,
                ContentTypeConverter.Singleton,
                LangConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ProfileBackgroundColorUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfileBackgroundColorUnion) || t == typeof(ProfileBackgroundColorUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "000000":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The000000 };
                        case "002402":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The002402 };
                        case "008ACF":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The008Acf };
                        case "0099B9":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The0099B9 };
                        case "0C1313":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The0C1313 };
                        case "13264B":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The13264B };
                        case "1A1B1F":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The1A1B1F };
                        case "1C1C1C":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The1C1C1C };
                        case "2375D9":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The2375D9 };
                        case "412F4D":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The412F4D };
                        case "642D8B":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The642D8B };
                        case "8B9ECF":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The8B9Ecf };
                        case "981CEB":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.The981Ceb };
                        case "ABB8C2":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Abb8C2 };
                        case "BA4A4C":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Ba4A4C };
                        case "C0DEED":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.C0Deed };
                        case "C15B69":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.C15B69 };
                        case "C6E2EE":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.C6E2Ee };
                        case "CEF7BD":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Cef7Bd };
                        case "DAE6D8":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Dae6D8 };
                        case "DBE9ED":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Dbe9Ed };
                        case "DD2E44":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Dd2E44 };
                        case "DFE3E8":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Dfe3E8 };
                        case "DFE6EB":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Dfe6Eb };
                        case "EEE9E9":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Eee9E9 };
                        case "F5ABB5":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.F5Abb5 };
                        case "F5F8FA":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.F5F8Fa };
                        case "FAB81E":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Fab81E };
                        case "FF6699":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Ff6699 };
                        case "FF691F":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Ff691F };
                        case "FFCC4D":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Ffcc4D };
                        case "FFF04D":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Fff04D };
                        case "FFFFFF":
                            return new ProfileBackgroundColorUnion { Enum = ProfileBackgroundColorEnum.Ffffff };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ProfileBackgroundColorUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ProfileBackgroundColorUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ProfileBackgroundColorUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ProfileBackgroundColorEnum.The000000:
                        serializer.Serialize(writer, "000000");
                        return;
                    case ProfileBackgroundColorEnum.The002402:
                        serializer.Serialize(writer, "002402");
                        return;
                    case ProfileBackgroundColorEnum.The008Acf:
                        serializer.Serialize(writer, "008ACF");
                        return;
                    case ProfileBackgroundColorEnum.The0099B9:
                        serializer.Serialize(writer, "0099B9");
                        return;
                    case ProfileBackgroundColorEnum.The0C1313:
                        serializer.Serialize(writer, "0C1313");
                        return;
                    case ProfileBackgroundColorEnum.The13264B:
                        serializer.Serialize(writer, "13264B");
                        return;
                    case ProfileBackgroundColorEnum.The1A1B1F:
                        serializer.Serialize(writer, "1A1B1F");
                        return;
                    case ProfileBackgroundColorEnum.The1C1C1C:
                        serializer.Serialize(writer, "1C1C1C");
                        return;
                    case ProfileBackgroundColorEnum.The2375D9:
                        serializer.Serialize(writer, "2375D9");
                        return;
                    case ProfileBackgroundColorEnum.The412F4D:
                        serializer.Serialize(writer, "412F4D");
                        return;
                    case ProfileBackgroundColorEnum.The642D8B:
                        serializer.Serialize(writer, "642D8B");
                        return;
                    case ProfileBackgroundColorEnum.The8B9Ecf:
                        serializer.Serialize(writer, "8B9ECF");
                        return;
                    case ProfileBackgroundColorEnum.The981Ceb:
                        serializer.Serialize(writer, "981CEB");
                        return;
                    case ProfileBackgroundColorEnum.Abb8C2:
                        serializer.Serialize(writer, "ABB8C2");
                        return;
                    case ProfileBackgroundColorEnum.Ba4A4C:
                        serializer.Serialize(writer, "BA4A4C");
                        return;
                    case ProfileBackgroundColorEnum.C0Deed:
                        serializer.Serialize(writer, "C0DEED");
                        return;
                    case ProfileBackgroundColorEnum.C15B69:
                        serializer.Serialize(writer, "C15B69");
                        return;
                    case ProfileBackgroundColorEnum.C6E2Ee:
                        serializer.Serialize(writer, "C6E2EE");
                        return;
                    case ProfileBackgroundColorEnum.Cef7Bd:
                        serializer.Serialize(writer, "CEF7BD");
                        return;
                    case ProfileBackgroundColorEnum.Dae6D8:
                        serializer.Serialize(writer, "DAE6D8");
                        return;
                    case ProfileBackgroundColorEnum.Dbe9Ed:
                        serializer.Serialize(writer, "DBE9ED");
                        return;
                    case ProfileBackgroundColorEnum.Dd2E44:
                        serializer.Serialize(writer, "DD2E44");
                        return;
                    case ProfileBackgroundColorEnum.Dfe3E8:
                        serializer.Serialize(writer, "DFE3E8");
                        return;
                    case ProfileBackgroundColorEnum.Dfe6Eb:
                        serializer.Serialize(writer, "DFE6EB");
                        return;
                    case ProfileBackgroundColorEnum.Eee9E9:
                        serializer.Serialize(writer, "EEE9E9");
                        return;
                    case ProfileBackgroundColorEnum.F5Abb5:
                        serializer.Serialize(writer, "F5ABB5");
                        return;
                    case ProfileBackgroundColorEnum.F5F8Fa:
                        serializer.Serialize(writer, "F5F8FA");
                        return;
                    case ProfileBackgroundColorEnum.Fab81E:
                        serializer.Serialize(writer, "FAB81E");
                        return;
                    case ProfileBackgroundColorEnum.Ff6699:
                        serializer.Serialize(writer, "FF6699");
                        return;
                    case ProfileBackgroundColorEnum.Ff691F:
                        serializer.Serialize(writer, "FF691F");
                        return;
                    case ProfileBackgroundColorEnum.Ffcc4D:
                        serializer.Serialize(writer, "FFCC4D");
                        return;
                    case ProfileBackgroundColorEnum.Fff04D:
                        serializer.Serialize(writer, "FFF04D");
                        return;
                    case ProfileBackgroundColorEnum.Ffffff:
                        serializer.Serialize(writer, "FFFFFF");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ProfileBackgroundColorUnion");
        }

        public static readonly ProfileBackgroundColorUnionConverter Singleton = new ProfileBackgroundColorUnionConverter();
    }

    internal class ProfileBackgroundColorEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfileBackgroundColorEnum) || t == typeof(ProfileBackgroundColorEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "000000":
                    return ProfileBackgroundColorEnum.The000000;
                case "002402":
                    return ProfileBackgroundColorEnum.The002402;
                case "008ACF":
                    return ProfileBackgroundColorEnum.The008Acf;
                case "0099B9":
                    return ProfileBackgroundColorEnum.The0099B9;
                case "0C1313":
                    return ProfileBackgroundColorEnum.The0C1313;
                case "13264B":
                    return ProfileBackgroundColorEnum.The13264B;
                case "1A1B1F":
                    return ProfileBackgroundColorEnum.The1A1B1F;
                case "1C1C1C":
                    return ProfileBackgroundColorEnum.The1C1C1C;
                case "2375D9":
                    return ProfileBackgroundColorEnum.The2375D9;
                case "412F4D":
                    return ProfileBackgroundColorEnum.The412F4D;
                case "642D8B":
                    return ProfileBackgroundColorEnum.The642D8B;
                case "8B9ECF":
                    return ProfileBackgroundColorEnum.The8B9Ecf;
                case "981CEB":
                    return ProfileBackgroundColorEnum.The981Ceb;
                case "ABB8C2":
                    return ProfileBackgroundColorEnum.Abb8C2;
                case "BA4A4C":
                    return ProfileBackgroundColorEnum.Ba4A4C;
                case "C0DEED":
                    return ProfileBackgroundColorEnum.C0Deed;
                case "C15B69":
                    return ProfileBackgroundColorEnum.C15B69;
                case "C6E2EE":
                    return ProfileBackgroundColorEnum.C6E2Ee;
                case "CEF7BD":
                    return ProfileBackgroundColorEnum.Cef7Bd;
                case "DAE6D8":
                    return ProfileBackgroundColorEnum.Dae6D8;
                case "DBE9ED":
                    return ProfileBackgroundColorEnum.Dbe9Ed;
                case "DD2E44":
                    return ProfileBackgroundColorEnum.Dd2E44;
                case "DFE3E8":
                    return ProfileBackgroundColorEnum.Dfe3E8;
                case "DFE6EB":
                    return ProfileBackgroundColorEnum.Dfe6Eb;
                case "EEE9E9":
                    return ProfileBackgroundColorEnum.Eee9E9;
                case "F5ABB5":
                    return ProfileBackgroundColorEnum.F5Abb5;
                case "F5F8FA":
                    return ProfileBackgroundColorEnum.F5F8Fa;
                case "FAB81E":
                    return ProfileBackgroundColorEnum.Fab81E;
                case "FF6699":
                    return ProfileBackgroundColorEnum.Ff6699;
                case "FF691F":
                    return ProfileBackgroundColorEnum.Ff691F;
                case "FFCC4D":
                    return ProfileBackgroundColorEnum.Ffcc4D;
                case "FFF04D":
                    return ProfileBackgroundColorEnum.Fff04D;
                case "FFFFFF":
                    return ProfileBackgroundColorEnum.Ffffff;
            }
            throw new Exception("Cannot unmarshal type ProfileBackgroundColorEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProfileBackgroundColorEnum)untypedValue;
            switch (value)
            {
                case ProfileBackgroundColorEnum.The000000:
                    serializer.Serialize(writer, "000000");
                    return;
                case ProfileBackgroundColorEnum.The002402:
                    serializer.Serialize(writer, "002402");
                    return;
                case ProfileBackgroundColorEnum.The008Acf:
                    serializer.Serialize(writer, "008ACF");
                    return;
                case ProfileBackgroundColorEnum.The0099B9:
                    serializer.Serialize(writer, "0099B9");
                    return;
                case ProfileBackgroundColorEnum.The0C1313:
                    serializer.Serialize(writer, "0C1313");
                    return;
                case ProfileBackgroundColorEnum.The13264B:
                    serializer.Serialize(writer, "13264B");
                    return;
                case ProfileBackgroundColorEnum.The1A1B1F:
                    serializer.Serialize(writer, "1A1B1F");
                    return;
                case ProfileBackgroundColorEnum.The1C1C1C:
                    serializer.Serialize(writer, "1C1C1C");
                    return;
                case ProfileBackgroundColorEnum.The2375D9:
                    serializer.Serialize(writer, "2375D9");
                    return;
                case ProfileBackgroundColorEnum.The412F4D:
                    serializer.Serialize(writer, "412F4D");
                    return;
                case ProfileBackgroundColorEnum.The642D8B:
                    serializer.Serialize(writer, "642D8B");
                    return;
                case ProfileBackgroundColorEnum.The8B9Ecf:
                    serializer.Serialize(writer, "8B9ECF");
                    return;
                case ProfileBackgroundColorEnum.The981Ceb:
                    serializer.Serialize(writer, "981CEB");
                    return;
                case ProfileBackgroundColorEnum.Abb8C2:
                    serializer.Serialize(writer, "ABB8C2");
                    return;
                case ProfileBackgroundColorEnum.Ba4A4C:
                    serializer.Serialize(writer, "BA4A4C");
                    return;
                case ProfileBackgroundColorEnum.C0Deed:
                    serializer.Serialize(writer, "C0DEED");
                    return;
                case ProfileBackgroundColorEnum.C15B69:
                    serializer.Serialize(writer, "C15B69");
                    return;
                case ProfileBackgroundColorEnum.C6E2Ee:
                    serializer.Serialize(writer, "C6E2EE");
                    return;
                case ProfileBackgroundColorEnum.Cef7Bd:
                    serializer.Serialize(writer, "CEF7BD");
                    return;
                case ProfileBackgroundColorEnum.Dae6D8:
                    serializer.Serialize(writer, "DAE6D8");
                    return;
                case ProfileBackgroundColorEnum.Dbe9Ed:
                    serializer.Serialize(writer, "DBE9ED");
                    return;
                case ProfileBackgroundColorEnum.Dd2E44:
                    serializer.Serialize(writer, "DD2E44");
                    return;
                case ProfileBackgroundColorEnum.Dfe3E8:
                    serializer.Serialize(writer, "DFE3E8");
                    return;
                case ProfileBackgroundColorEnum.Dfe6Eb:
                    serializer.Serialize(writer, "DFE6EB");
                    return;
                case ProfileBackgroundColorEnum.Eee9E9:
                    serializer.Serialize(writer, "EEE9E9");
                    return;
                case ProfileBackgroundColorEnum.F5Abb5:
                    serializer.Serialize(writer, "F5ABB5");
                    return;
                case ProfileBackgroundColorEnum.F5F8Fa:
                    serializer.Serialize(writer, "F5F8FA");
                    return;
                case ProfileBackgroundColorEnum.Fab81E:
                    serializer.Serialize(writer, "FAB81E");
                    return;
                case ProfileBackgroundColorEnum.Ff6699:
                    serializer.Serialize(writer, "FF6699");
                    return;
                case ProfileBackgroundColorEnum.Ff691F:
                    serializer.Serialize(writer, "FF691F");
                    return;
                case ProfileBackgroundColorEnum.Ffcc4D:
                    serializer.Serialize(writer, "FFCC4D");
                    return;
                case ProfileBackgroundColorEnum.Fff04D:
                    serializer.Serialize(writer, "FFF04D");
                    return;
                case ProfileBackgroundColorEnum.Ffffff:
                    serializer.Serialize(writer, "FFFFFF");
                    return;
            }
            throw new Exception("Cannot marshal type ProfileBackgroundColorEnum");
        }

        public static readonly ProfileBackgroundColorEnumConverter Singleton = new ProfileBackgroundColorEnumConverter();
    }

    internal class ProfileSidebarBorderColorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfileSidebarBorderColor) || t == typeof(ProfileSidebarBorderColor?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "000000":
                    return ProfileSidebarBorderColor.The000000;
                case "008CFF":
                    return ProfileSidebarBorderColor.The008Cff;
                case "181A1E":
                    return ProfileSidebarBorderColor.The181A1E;
                case "28442E":
                    return ProfileSidebarBorderColor.The28442E;
                case "5ED4DC":
                    return ProfileSidebarBorderColor.The5Ed4Dc;
                case "7A5151":
                    return ProfileSidebarBorderColor.The7A5151;
                case "C0DEED":
                    return ProfileSidebarBorderColor.C0Deed;
                case "C6E2EE":
                    return ProfileSidebarBorderColor.C6E2Ee;
                case "CC3366":
                    return ProfileSidebarBorderColor.Cc3366;
                case "D3D2CF":
                    return ProfileSidebarBorderColor.D3D2Cf;
                case "DBE9ED":
                    return ProfileSidebarBorderColor.Dbe9Ed;
                case "EEEEEE":
                    return ProfileSidebarBorderColor.Eeeeee;
                case "FFFFFF":
                    return ProfileSidebarBorderColor.Ffffff;
            }
            throw new Exception("Cannot unmarshal type ProfileSidebarBorderColor");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProfileSidebarBorderColor)untypedValue;
            switch (value)
            {
                case ProfileSidebarBorderColor.The000000:
                    serializer.Serialize(writer, "000000");
                    return;
                case ProfileSidebarBorderColor.The008Cff:
                    serializer.Serialize(writer, "008CFF");
                    return;
                case ProfileSidebarBorderColor.The181A1E:
                    serializer.Serialize(writer, "181A1E");
                    return;
                case ProfileSidebarBorderColor.The28442E:
                    serializer.Serialize(writer, "28442E");
                    return;
                case ProfileSidebarBorderColor.The5Ed4Dc:
                    serializer.Serialize(writer, "5ED4DC");
                    return;
                case ProfileSidebarBorderColor.The7A5151:
                    serializer.Serialize(writer, "7A5151");
                    return;
                case ProfileSidebarBorderColor.C0Deed:
                    serializer.Serialize(writer, "C0DEED");
                    return;
                case ProfileSidebarBorderColor.C6E2Ee:
                    serializer.Serialize(writer, "C6E2EE");
                    return;
                case ProfileSidebarBorderColor.Cc3366:
                    serializer.Serialize(writer, "CC3366");
                    return;
                case ProfileSidebarBorderColor.D3D2Cf:
                    serializer.Serialize(writer, "D3D2CF");
                    return;
                case ProfileSidebarBorderColor.Dbe9Ed:
                    serializer.Serialize(writer, "DBE9ED");
                    return;
                case ProfileSidebarBorderColor.Eeeeee:
                    serializer.Serialize(writer, "EEEEEE");
                    return;
                case ProfileSidebarBorderColor.Ffffff:
                    serializer.Serialize(writer, "FFFFFF");
                    return;
            }
            throw new Exception("Cannot marshal type ProfileSidebarBorderColor");
        }

        public static readonly ProfileSidebarBorderColorConverter Singleton = new ProfileSidebarBorderColorConverter();
    }

    internal class ProfileSidebarFillColorUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfileSidebarFillColorUnion) || t == typeof(ProfileSidebarFillColorUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "000000":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.The000000 };
                        case "4A6544":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.The4A6544 };
                        case "95E8EC":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.The95E8Ec };
                        case "99CC33":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.The99Cc33 };
                        case "A0C5C7":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.A0C5C7 };
                        case "ACF2F2":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.Acf2F2 };
                        case "CBC6A8":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.Cbc6A8 };
                        case "D5B777":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.D5B777 };
                        case "DAECF4":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.Daecf4 };
                        case "DDEEF6":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.Ddeef6 };
                        case "E3E2DE":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.E3E2De };
                        case "E5507E":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.E5507E };
                        case "E6F6F9":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.E6F6F9 };
                        case "EFEFEF":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.Efefef };
                        case "F6F6F6":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.F6F6F6 };
                        case "FF9100":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.Ff9100 };
                        case "FFFFFF":
                            return new ProfileSidebarFillColorUnion { Enum = ProfileSidebarFillColorEnum.Ffffff };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ProfileSidebarFillColorUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ProfileSidebarFillColorUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ProfileSidebarFillColorUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ProfileSidebarFillColorEnum.The000000:
                        serializer.Serialize(writer, "000000");
                        return;
                    case ProfileSidebarFillColorEnum.The4A6544:
                        serializer.Serialize(writer, "4A6544");
                        return;
                    case ProfileSidebarFillColorEnum.The95E8Ec:
                        serializer.Serialize(writer, "95E8EC");
                        return;
                    case ProfileSidebarFillColorEnum.The99Cc33:
                        serializer.Serialize(writer, "99CC33");
                        return;
                    case ProfileSidebarFillColorEnum.A0C5C7:
                        serializer.Serialize(writer, "A0C5C7");
                        return;
                    case ProfileSidebarFillColorEnum.Acf2F2:
                        serializer.Serialize(writer, "ACF2F2");
                        return;
                    case ProfileSidebarFillColorEnum.Cbc6A8:
                        serializer.Serialize(writer, "CBC6A8");
                        return;
                    case ProfileSidebarFillColorEnum.D5B777:
                        serializer.Serialize(writer, "D5B777");
                        return;
                    case ProfileSidebarFillColorEnum.Daecf4:
                        serializer.Serialize(writer, "DAECF4");
                        return;
                    case ProfileSidebarFillColorEnum.Ddeef6:
                        serializer.Serialize(writer, "DDEEF6");
                        return;
                    case ProfileSidebarFillColorEnum.E3E2De:
                        serializer.Serialize(writer, "E3E2DE");
                        return;
                    case ProfileSidebarFillColorEnum.E5507E:
                        serializer.Serialize(writer, "E5507E");
                        return;
                    case ProfileSidebarFillColorEnum.E6F6F9:
                        serializer.Serialize(writer, "E6F6F9");
                        return;
                    case ProfileSidebarFillColorEnum.Efefef:
                        serializer.Serialize(writer, "EFEFEF");
                        return;
                    case ProfileSidebarFillColorEnum.F6F6F6:
                        serializer.Serialize(writer, "F6F6F6");
                        return;
                    case ProfileSidebarFillColorEnum.Ff9100:
                        serializer.Serialize(writer, "FF9100");
                        return;
                    case ProfileSidebarFillColorEnum.Ffffff:
                        serializer.Serialize(writer, "FFFFFF");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ProfileSidebarFillColorUnion");
        }

        public static readonly ProfileSidebarFillColorUnionConverter Singleton = new ProfileSidebarFillColorUnionConverter();
    }

    internal class ProfileSidebarFillColorEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfileSidebarFillColorEnum) || t == typeof(ProfileSidebarFillColorEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "000000":
                    return ProfileSidebarFillColorEnum.The000000;
                case "4A6544":
                    return ProfileSidebarFillColorEnum.The4A6544;
                case "95E8EC":
                    return ProfileSidebarFillColorEnum.The95E8Ec;
                case "99CC33":
                    return ProfileSidebarFillColorEnum.The99Cc33;
                case "A0C5C7":
                    return ProfileSidebarFillColorEnum.A0C5C7;
                case "ACF2F2":
                    return ProfileSidebarFillColorEnum.Acf2F2;
                case "CBC6A8":
                    return ProfileSidebarFillColorEnum.Cbc6A8;
                case "D5B777":
                    return ProfileSidebarFillColorEnum.D5B777;
                case "DAECF4":
                    return ProfileSidebarFillColorEnum.Daecf4;
                case "DDEEF6":
                    return ProfileSidebarFillColorEnum.Ddeef6;
                case "E3E2DE":
                    return ProfileSidebarFillColorEnum.E3E2De;
                case "E5507E":
                    return ProfileSidebarFillColorEnum.E5507E;
                case "E6F6F9":
                    return ProfileSidebarFillColorEnum.E6F6F9;
                case "EFEFEF":
                    return ProfileSidebarFillColorEnum.Efefef;
                case "F6F6F6":
                    return ProfileSidebarFillColorEnum.F6F6F6;
                case "FF9100":
                    return ProfileSidebarFillColorEnum.Ff9100;
                case "FFFFFF":
                    return ProfileSidebarFillColorEnum.Ffffff;
            }
            throw new Exception("Cannot unmarshal type ProfileSidebarFillColorEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProfileSidebarFillColorEnum)untypedValue;
            switch (value)
            {
                case ProfileSidebarFillColorEnum.The000000:
                    serializer.Serialize(writer, "000000");
                    return;
                case ProfileSidebarFillColorEnum.The4A6544:
                    serializer.Serialize(writer, "4A6544");
                    return;
                case ProfileSidebarFillColorEnum.The95E8Ec:
                    serializer.Serialize(writer, "95E8EC");
                    return;
                case ProfileSidebarFillColorEnum.The99Cc33:
                    serializer.Serialize(writer, "99CC33");
                    return;
                case ProfileSidebarFillColorEnum.A0C5C7:
                    serializer.Serialize(writer, "A0C5C7");
                    return;
                case ProfileSidebarFillColorEnum.Acf2F2:
                    serializer.Serialize(writer, "ACF2F2");
                    return;
                case ProfileSidebarFillColorEnum.Cbc6A8:
                    serializer.Serialize(writer, "CBC6A8");
                    return;
                case ProfileSidebarFillColorEnum.D5B777:
                    serializer.Serialize(writer, "D5B777");
                    return;
                case ProfileSidebarFillColorEnum.Daecf4:
                    serializer.Serialize(writer, "DAECF4");
                    return;
                case ProfileSidebarFillColorEnum.Ddeef6:
                    serializer.Serialize(writer, "DDEEF6");
                    return;
                case ProfileSidebarFillColorEnum.E3E2De:
                    serializer.Serialize(writer, "E3E2DE");
                    return;
                case ProfileSidebarFillColorEnum.E5507E:
                    serializer.Serialize(writer, "E5507E");
                    return;
                case ProfileSidebarFillColorEnum.E6F6F9:
                    serializer.Serialize(writer, "E6F6F9");
                    return;
                case ProfileSidebarFillColorEnum.Efefef:
                    serializer.Serialize(writer, "EFEFEF");
                    return;
                case ProfileSidebarFillColorEnum.F6F6F6:
                    serializer.Serialize(writer, "F6F6F6");
                    return;
                case ProfileSidebarFillColorEnum.Ff9100:
                    serializer.Serialize(writer, "FF9100");
                    return;
                case ProfileSidebarFillColorEnum.Ffffff:
                    serializer.Serialize(writer, "FFFFFF");
                    return;
            }
            throw new Exception("Cannot marshal type ProfileSidebarFillColorEnum");
        }

        public static readonly ProfileSidebarFillColorEnumConverter Singleton = new ProfileSidebarFillColorEnumConverter();
    }

    internal class ProfileTextColorUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfileTextColorUnion) || t == typeof(ProfileTextColorUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "000000":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.The000000 };
                        case "2626E3":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.The2626E3 };
                        case "3C3940":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.The3C3940 };
                        case "3E4415":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.The3E4415 };
                        case "663B12":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.The663B12 };
                        case "9DBC80":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.The9Dbc80 };
                        case "9FA990":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.The9Fa990 };
                        case "A27550":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.A27550 };
                        case "FCE9C2":
                            return new ProfileTextColorUnion { Enum = ProfileTextColorEnum.Fce9C2 };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new ProfileTextColorUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type ProfileTextColorUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ProfileTextColorUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ProfileTextColorEnum.The000000:
                        serializer.Serialize(writer, "000000");
                        return;
                    case ProfileTextColorEnum.The2626E3:
                        serializer.Serialize(writer, "2626E3");
                        return;
                    case ProfileTextColorEnum.The3C3940:
                        serializer.Serialize(writer, "3C3940");
                        return;
                    case ProfileTextColorEnum.The3E4415:
                        serializer.Serialize(writer, "3E4415");
                        return;
                    case ProfileTextColorEnum.The663B12:
                        serializer.Serialize(writer, "663B12");
                        return;
                    case ProfileTextColorEnum.The9Dbc80:
                        serializer.Serialize(writer, "9DBC80");
                        return;
                    case ProfileTextColorEnum.The9Fa990:
                        serializer.Serialize(writer, "9FA990");
                        return;
                    case ProfileTextColorEnum.A27550:
                        serializer.Serialize(writer, "A27550");
                        return;
                    case ProfileTextColorEnum.Fce9C2:
                        serializer.Serialize(writer, "FCE9C2");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type ProfileTextColorUnion");
        }

        public static readonly ProfileTextColorUnionConverter Singleton = new ProfileTextColorUnionConverter();
    }

    internal class ProfileTextColorEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ProfileTextColorEnum) || t == typeof(ProfileTextColorEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "000000":
                    return ProfileTextColorEnum.The000000;
                case "2626E3":
                    return ProfileTextColorEnum.The2626E3;
                case "3C3940":
                    return ProfileTextColorEnum.The3C3940;
                case "3E4415":
                    return ProfileTextColorEnum.The3E4415;
                case "663B12":
                    return ProfileTextColorEnum.The663B12;
                case "9DBC80":
                    return ProfileTextColorEnum.The9Dbc80;
                case "9FA990":
                    return ProfileTextColorEnum.The9Fa990;
                case "A27550":
                    return ProfileTextColorEnum.A27550;
                case "FCE9C2":
                    return ProfileTextColorEnum.Fce9C2;
            }
            throw new Exception("Cannot unmarshal type ProfileTextColorEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ProfileTextColorEnum)untypedValue;
            switch (value)
            {
                case ProfileTextColorEnum.The000000:
                    serializer.Serialize(writer, "000000");
                    return;
                case ProfileTextColorEnum.The2626E3:
                    serializer.Serialize(writer, "2626E3");
                    return;
                case ProfileTextColorEnum.The3C3940:
                    serializer.Serialize(writer, "3C3940");
                    return;
                case ProfileTextColorEnum.The3E4415:
                    serializer.Serialize(writer, "3E4415");
                    return;
                case ProfileTextColorEnum.The663B12:
                    serializer.Serialize(writer, "663B12");
                    return;
                case ProfileTextColorEnum.The9Dbc80:
                    serializer.Serialize(writer, "9DBC80");
                    return;
                case ProfileTextColorEnum.The9Fa990:
                    serializer.Serialize(writer, "9FA990");
                    return;
                case ProfileTextColorEnum.A27550:
                    serializer.Serialize(writer, "A27550");
                    return;
                case ProfileTextColorEnum.Fce9C2:
                    serializer.Serialize(writer, "FCE9C2");
                    return;
            }
            throw new Exception("Cannot marshal type ProfileTextColorEnum");
        }

        public static readonly ProfileTextColorEnumConverter Singleton = new ProfileTextColorEnumConverter();
    }

    internal class TranslatorTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TranslatorType) || t == typeof(TranslatorType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "none":
                    return TranslatorType.None;
                case "regular":
                    return TranslatorType.Regular;
            }
            throw new Exception("Cannot unmarshal type TranslatorType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TranslatorType)untypedValue;
            switch (value)
            {
                case TranslatorType.None:
                    serializer.Serialize(writer, "none");
                    return;
                case TranslatorType.Regular:
                    serializer.Serialize(writer, "regular");
                    return;
            }
            throw new Exception("Cannot marshal type TranslatorType");
        }

        public static readonly TranslatorTypeConverter Singleton = new TranslatorTypeConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Borvar":
                    return Name.Borvar;
                case "Lexi \ud83e\udd91":
                    return Name.Lexi;
                case "Pelo":
                    return Name.Pelo;
                case "Pleasure Castle \ud83d\udd1e":
                    return Name.PleasureCastle;
                case "Rayno Groundwalker":
                    return Name.RaynoGroundwalker;
            }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.Borvar:
                    serializer.Serialize(writer, "Borvar");
                    return;
                case Name.Lexi:
                    serializer.Serialize(writer, "Lexi \ud83e\udd91");
                    return;
                case Name.Pelo:
                    serializer.Serialize(writer, "Pelo");
                    return;
                case Name.PleasureCastle:
                    serializer.Serialize(writer, "Pleasure Castle \ud83d\udd1e");
                    return;
                case Name.RaynoGroundwalker:
                    serializer.Serialize(writer, "Rayno Groundwalker");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class ScreenNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ScreenName) || t == typeof(ScreenName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Borvart":
                    return ScreenName.Borvart;
                case "DeaderSquid":
                    return ScreenName.DeaderSquid;
                case "FakeryWay":
                    return ScreenName.FakeryWay;
                case "RaynoTW":
                    return ScreenName.RaynoTw;
                case "_SrPelo_":
                    return ScreenName.SrPelo;
            }
            throw new Exception("Cannot unmarshal type ScreenName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ScreenName)untypedValue;
            switch (value)
            {
                case ScreenName.Borvart:
                    serializer.Serialize(writer, "Borvart");
                    return;
                case ScreenName.DeaderSquid:
                    serializer.Serialize(writer, "DeaderSquid");
                    return;
                case ScreenName.FakeryWay:
                    serializer.Serialize(writer, "FakeryWay");
                    return;
                case ScreenName.RaynoTw:
                    serializer.Serialize(writer, "RaynoTW");
                    return;
                case ScreenName.SrPelo:
                    serializer.Serialize(writer, "_SrPelo_");
                    return;
            }
            throw new Exception("Cannot marshal type ScreenName");
        }

        public static readonly ScreenNameConverter Singleton = new ScreenNameConverter();
    }

    internal class TagTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TagType) || t == typeof(TagType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "user")
            {
                return TagType.User;
            }
            throw new Exception("Cannot unmarshal type TagType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TagType)untypedValue;
            if (value == TagType.User)
            {
                serializer.Serialize(writer, "user");
                return;
            }
            throw new Exception("Cannot marshal type TagType");
        }

        public static readonly TagTypeConverter Singleton = new TagTypeConverter();
    }

    internal class ResizeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Resize) || t == typeof(Resize?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "crop":
                    return Resize.Crop;
                case "fit":
                    return Resize.Fit;
            }
            throw new Exception("Cannot unmarshal type Resize");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Resize)untypedValue;
            switch (value)
            {
                case Resize.Crop:
                    serializer.Serialize(writer, "crop");
                    return;
                case Resize.Fit:
                    serializer.Serialize(writer, "fit");
                    return;
            }
            throw new Exception("Cannot marshal type Resize");
        }

        public static readonly ResizeConverter Singleton = new ResizeConverter();
    }

    internal class MediaTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MediaType) || t == typeof(MediaType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "animated_gif":
                    return MediaType.AnimatedGif;
                case "photo":
                    return MediaType.Photo;
                case "video":
                    return MediaType.Video;
            }
            throw new Exception("Cannot unmarshal type MediaType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MediaType)untypedValue;
            switch (value)
            {
                case MediaType.AnimatedGif:
                    serializer.Serialize(writer, "animated_gif");
                    return;
                case MediaType.Photo:
                    serializer.Serialize(writer, "photo");
                    return;
                case MediaType.Video:
                    serializer.Serialize(writer, "video");
                    return;
            }
            throw new Exception("Cannot marshal type MediaType");
        }

        public static readonly MediaTypeConverter Singleton = new MediaTypeConverter();
    }

    internal class ContentTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ContentType) || t == typeof(ContentType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "application/x-mpegURL":
                    return ContentType.ApplicationXMpegUrl;
                case "video/mp4":
                    return ContentType.VideoMp4;
            }
            throw new Exception("Cannot unmarshal type ContentType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ContentType)untypedValue;
            switch (value)
            {
                case ContentType.ApplicationXMpegUrl:
                    serializer.Serialize(writer, "application/x-mpegURL");
                    return;
                case ContentType.VideoMp4:
                    serializer.Serialize(writer, "video/mp4");
                    return;
            }
            throw new Exception("Cannot marshal type ContentType");
        }

        public static readonly ContentTypeConverter Singleton = new ContentTypeConverter();
    }

    internal class LangConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Lang) || t == typeof(Lang?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "da":
                    return Lang.Da;
                case "de":
                    return Lang.De;
                case "en":
                    return Lang.En;
                case "es":
                    return Lang.Es;
                case "et":
                    return Lang.Et;
                case "fr":
                    return Lang.Fr;
                case "in":
                    return Lang.In;
                case "ja":
                    return Lang.Ja;
                case "ko":
                    return Lang.Ko;
                case "no":
                    return Lang.No;
                case "pt":
                    return Lang.Pt;
                case "tl":
                    return Lang.Tl;
                case "tr":
                    return Lang.Tr;
                case "und":
                    return Lang.Und;
            }
            throw new Exception("Cannot unmarshal type Lang");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Lang)untypedValue;
            switch (value)
            {
                case Lang.Da:
                    serializer.Serialize(writer, "da");
                    return;
                case Lang.De:
                    serializer.Serialize(writer, "de");
                    return;
                case Lang.En:
                    serializer.Serialize(writer, "en");
                    return;
                case Lang.Es:
                    serializer.Serialize(writer, "es");
                    return;
                case Lang.Et:
                    serializer.Serialize(writer, "et");
                    return;
                case Lang.Fr:
                    serializer.Serialize(writer, "fr");
                    return;
                case Lang.In:
                    serializer.Serialize(writer, "in");
                    return;
                case Lang.Ja:
                    serializer.Serialize(writer, "ja");
                    return;
                case Lang.Ko:
                    serializer.Serialize(writer, "ko");
                    return;
                case Lang.No:
                    serializer.Serialize(writer, "no");
                    return;
                case Lang.Pt:
                    serializer.Serialize(writer, "pt");
                    return;
                case Lang.Tl:
                    serializer.Serialize(writer, "tl");
                    return;
                case Lang.Tr:
                    serializer.Serialize(writer, "tr");
                    return;
                case Lang.Und:
                    serializer.Serialize(writer, "und");
                    return;
            }
            throw new Exception("Cannot marshal type Lang");
        }

        public static readonly LangConverter Singleton = new LangConverter();
    }
}
